MySQL Deployment (mysql-deployment.yaml):
- Creates a single MySQL pod (replicas: 1 for data consistency)
- Uses persistent storage for data durability
- Mounts an init script from ConfigMap
- Exposes port 3306
- Uses secrets for sensitive data

MySQL Service (mysql-deployment.yaml):
- Type: ClusterIP (internal access only)
- Allows other pods in cluster to connect to MySQL using mysql-service hostname
- Exposes port 3306

MySQL PVC (mysql-pvc.yaml):
- PersistentVolumeClaim requests storage for MySQL
- Ensures data persists even if pod restarts

MySQL ConfigMap (mysql-configmap.yaml):
- Contains initialization SQL script
- Creates necessary table on first startup

MySQL Secret (mysql-secret.yaml):
- Stores MySQL root password securely
- Base64 encoded for Kubernetes requirements

URL Shortener Deployment (urlshortener-deployment.yaml):
- Runs 3 replicas for high availability
- Uses your Docker image
- Configures environment variables to connect to MySQL
- Exposes port 5000 (default for Flask)

URL Shortener Service (urlshortener-deployment.yaml):
- Type: LoadBalancer (external access)
- Maps port 80 to container port 5000
- Provides load balancing across the 3 replicas

To deploy these manifests:
- First, make sure your Docker image is built and available:

Each pod shows:
- Flask server running
- Handling POST requests for URL creation
- Handling HEAD requests for redirections
- 200 status codes for successful operations
- 302 status codes for redirections